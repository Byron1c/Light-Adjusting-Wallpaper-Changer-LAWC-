; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Light Adjusting Wallpaper Changer (LAWC)"
#define MyAppNameSHORT "LAWC"
#define MyAppVersion "0.9.9.0_BETA"           
#define MyAppPublisher "Strangetimez"
#define MyAppURL "https://www.strangetimez.com/Blog/light-adjusting-wallpaper-changer-application/"
#define MyAppExeName "LAWC.exe"
#define MyAppDataPathName "LAWC"


[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{BAAD5B3E-A0E8-416F-ACAA-43653CEB8DDB}
AppName = {#MyAppNameSHORT}
; {#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={commonpf}\{#MyAppNameSHORT}
DefaultGroupName={#MyAppNameSHORT}
AllowNoIcons=yes
LicenseFile=E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\Installer\License.txt
InfoBeforeFile=E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\Installer\PreInstallInfo.txt
InfoAfterFile=E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\Installer\PostInstallInfo.txt
;OutputDir=E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\Installer\Output
OutputDir=E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC Data\Installers
OutputBaseFilename=LAWC_Setup_{#MyAppVersion}  
;SetupIconFile=E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\Installer\LAWC256.ico
SetupIconFile=LAWC256.ico
WizardImageFile=E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\Installer\LAWCIconClean.bmp
WizardSmallImageFile=E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\Installer\LAWCIconClean.bmp
Compression=lzma
SolidCompression=yes
CloseApplications=yes
UsePreviousAppDir=no


[UninstallRun]


[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Dirs]
Name: {app}; Permissions: users-full    

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
         

[Files]
Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\LAWC\bin\Debug\LAWC.exe"; DestDir: "{app}"; Flags: ignoreversion; Check:IsDotNet461Detected 
Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\LAWC\bin\Debug\LAWC.exe.config"; DestDir: "{app}"; Flags: ignoreversion; 

Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\LAWC\bin\Debug\MBG.SimpleWizard.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\LAWC\bin\Debug\CustomScrollBar.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\LAWC\bin\Debug\OpenWeatherAPI.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\LAWC\bin\Debug\Newtonsoft.Json.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\LAWC\bin\Debug\OpenHardwareMonitorLib.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\LAWC\bin\Debug\MetadataExtractor.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\LAWC\bin\Debug\ObjectListView.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\LAWC\bin\Debug\XmpCore.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\LAWC\bin\Debug\ImageProcessor.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\LAWC\bin\Debug\JetBrains.Annotations.dll"; DestDir: "{app}"; Flags: ignoreversion
;Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\ColorMatrix\bin\Debug\ColorMatrixExt.dll"; DestDir: "{app}"; Flags: ignoreversion
;Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\ColorMatrix\bin\Debug\Matrix.dll"; DestDir: "{app}"; Flags: ignoreversion

Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\LAWC\bin\Debug\Images\Sample4k.jpg"; DestDir: "{app}\Images"; Flags: ignoreversion
Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\LAWC\bin\Debug\Images\LAWC.ico"; DestDir: "{app}\Images"; Flags: ignoreversion
Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\LAWC\bin\Debug\Images\LAWCWorking.ico"; DestDir: "{app}\Images"; Flags: ignoreversion
Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\LAWC\bin\Debug\WallpaperWebsites.xml"; DestDir: "{app}"; Flags: ignoreversion; 
Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\Installer\Uninstall.bat"; DestDir: "{app}"; Flags: ignoreversion
Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\LAWC\LAWC\bin\Debug\Readme.txt"; DestDir: "{app}"; Flags: isreadme
                                              
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppNameSHORT}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:ProgramOnTheWeb,{#MyAppName}}"; Filename: "{#MyAppURL}"
Name: "{group}\{cm:UninstallProgram,{#MyAppNameSHORT}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppNameSHORT}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppNameSHORT, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

;[UninstallDelete]
;;This works only if it is installed in default location
;Type: filesandordirs; Name: "{pf}\{#MyAppName}"


[CustomMessages]
//dotnetmissing = LAWC needs the Microsoft .NET Framework %nto be installed in your copy of Windows. %n%nTherefore please : %n - Download and run the .NET Framework install program, and %n - Then run this setup program again. %n%nWould you like to install .NET from Microsoft now? %n%n
//dotnetok = DOT NET 4.6.1 DETECTED
confirmdeletedata = Would you like to remove the settings, error log, and setting backups?

[Code]
var
  //Page: TInputOptionWizardPage;
  IsPortable: Boolean;
  portableCheckBox: TNewCheckBox;
  MD5Comp: string;
// FROM: http://www.kynosarges.de/DotNetVersion.html
//    https://stackoverflow.com/questions/4104011/inno-setup-verify-that-net-4-0-is-installed/34069753

function IsDotNetDetected(version: string; service: cardinal): boolean;
// Indicates whether the specified version and service pack of the .NET Framework is installed.
//
// version -- Specify one of these strings for the required .NET Framework version:
//    'v1.1'          .NET Framework 1.1
//    'v2.0'          .NET Framework 2.0
//    'v3.0'          .NET Framework 3.0
//    'v3.5'          .NET Framework 3.5
//    'v4\Client'     .NET Framework 4.0 Client Profile
//    'v4\Full'       .NET Framework 4.0 Full Installation
//    'v4.5'          .NET Framework 4.5
//    'v4.5.1'        .NET Framework 4.5.1
//    'v4.5.2'        .NET Framework 4.5.2
//    'v4.6'          .NET Framework 4.6
//    'v4.6.1'        .NET Framework 4.6.1
//    'v4.6.2'        .NET Framework 4.6.2
//    'v4.7'          .NET Framework 4.7
//
// service -- Specify any non-negative integer for the required service pack level:
//    0               No service packs required
//    1, 2, etc.      Service pack 1, 2, etc. required
var
    key, versionKey: string;
    install, release, serviceCount, versionRelease: cardinal;
    success: boolean;
begin
    versionKey := version;
    versionRelease := 0;

    // .NET 1.1 and 2.0 embed release number in version key
    if version = 'v1.1' then begin
        versionKey := 'v1.1.4322';
    end else if version = 'v2.0' then begin
        versionKey := 'v2.0.50727';
    end

    // .NET 4.5 and newer install as update to .NET 4.0 Full
    else if Pos('v4.', version) = 1 then begin
        versionKey := 'v4\Full';
        case version of
          'v4.5':   versionRelease := 378389;
          'v4.5.1': versionRelease := 378675; // 378758 on Windows 8 and older
          'v4.5.2': versionRelease := 379893;
          'v4.6':   versionRelease := 393295; // 393297 on Windows 8.1 and older
          'v4.6.1': versionRelease := 394254; // 394271 before Win10 November Update
          'v4.6.2': versionRelease := 394802; // 394806 before Win10 Anniversary Update
          'v4.7':   versionRelease := 460798; // 460805 before Win10 Creators Update
        end;
    end;

    // installation key group for all .NET versions
    key := 'SOFTWARE\Microsoft\NET Framework Setup\NDP\' + versionKey;

    // .NET 3.0 uses value InstallSuccess in subkey Setup
    if Pos('v3.0', version) = 1 then begin
        success := RegQueryDWordValue(HKLM, key + '\Setup', 'InstallSuccess', install);
    end else begin
        success := RegQueryDWordValue(HKLM, key, 'Install', install);
    end;

    // .NET 4.0 and newer use value Servicing instead of SP
    if Pos('v4', version) = 1 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Servicing', serviceCount);
    end else begin
        success := success and RegQueryDWordValue(HKLM, key, 'SP', serviceCount);
    end;

    // .NET 4.5 and newer use additional value Release
    if versionRelease > 0 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Release', release);
        success := success and (release >= versionRelease);
    end;

    result := success and (install = 1) and (serviceCount >= service);
end;


function isPortableOLD: Boolean;
begin
  // here is the Check function used above; if you return True to this
  // function, the file will be installed, when False, the file won't 
  // be installed
  //Result := PortableCheckBox.Checked;
end;

//================================================================================================================
procedure InitializeWizard;
//var
begin

 // shrink the "Ready" memo to make room for the checkbox
  //WizardForm.ReadyMemo.Height := WizardForm.ReadyMemo.Height - ScaleY(48);
  // create the checkbox
  portableCheckBox := TNewCheckBox.Create(WizardForm);
  with portableCheckBox do
  begin
    Parent := WizardForm.FinishedPage;   
    Left := WizardForm.FinishedLabel.Left + 4; // 180;//WizardForm.ReadyMemo.Left;   //FinishedHeadingLabel  //FinishedLabel
    Top := WizardForm.FinishedLabel.Top + 192; //198;//WizardForm.ReadyMemo.Top + WizardForm.ReadyMemo.Height + ScaleY(16);
    //Height := ScaleY(Height);
    Width := 300; //WizardForm.RunList.Width;

    Caption := 'Make this a Portable installation';
  end;
end;

//==============================================
function InitializeSetup(): Boolean;
//var         

begin
    
    if not IsDotNetDetected('v4.7', 0) then begin
        MsgBox('LAWC requires Microsoft .NET Framework 4.7.2.'#13#13
            'Please use Windows Update to install this version,'#13
            'and then re-run the LAWC setup program.', mbInformation, MB_OK);
        result := false;
    end else
        result := true;
end;
//================================================================================================================
function NextButtonClick(CurPageID: Integer): Boolean;
var
  strFilename: string;
  str: AnsiString; //string;
  str2: string;
  resultSave: boolean;
  changeCount: integer;

begin

  changeCount := 0;

  // Next button was just clicked on the "Ready" page
  if CurPageID = wpFinished then //wpReady then
  begin
    // is the checkbox checked?
    if portableCheckBox.Checked then
    begin
      Log('Portable Installation'); // Portable = True  

      strFilename := ExpandConstant('{app}\LAWC.exe.config');

      if FileExists(strFilename) then
      begin
        // Replace the values in the INSTALLED .config file and save it
        LoadStringFromFile(strFilename, str);
        str2 := String(str);
        changeCount := StringChangeEx(str2, 'Portable" serializeAs="String"><value>False', 'Portable" serializeAs="String"><value>True', True); 
        SaveStringToFile(strFilename, str2, False);           
      end;        

    end
      else
    begin
      // the checkbox is not checked, here you call your function to start the playback
      Log('Local Installation');
      // No need to do anything, the app defaults Portable = False
      
    end;

    //MsgBox('Setup is now complete.', mbInformation, MB_OK);

  end;

  if CurPageID = wpFinished then
   begin
      
   end;

  Result := True;
end;



// FROM: http://picksync.wordpress.com/2017/12/22/picksyncs-installer-inno-setup-and-the-net-framework/
function IsDotNet461Detected(): Boolean;  //find version 4.5 or version 4
begin
     	result := IsDotNetDetected('v4.6.1', 0);     
	if not result then result := IsDotNetDetected('v4\Full', 0);     
	if not result then result := IsDotNetDetected('v4\Client', 0); 
end;

function IsDotNet2Detected(): Boolean;  
begin //find versions 3.5 or 3 or 2     
	result := IsDotNetDetected('v3.5', 0);     
	if not result then result := IsDotNetDetected('v3.0', 0);     
	if not result then result := IsDotNetDetected('v2.0.50727', 0); 
end;                                                                     



function InitializeUninstall(): Boolean;
var
  ResultCode:Integer;
begin
   
   //MsgBox(ExpandConstant('{userappdata}' ) + '\'  + ExpandConstant('{#MyAppDataPathName}') + '\Uninstall.bat', mbInformation, MB_OK);

   //MsgBox(ExpandConstant('{app}' ) + '\Uninstall.bat', mbInformation, MB_OK);

  //Exec('cmd.exe', '/c "' + ExpandConstant('{app}' ) + '\Uninstall.bat','',SW_HIDE, ewWaitUntilTerminated, ResultCode);
  //Exec('cmd.exe', ' "' + ExpandConstant('{app}\Uninstall.bat"' ),'',SW_SHOW, ewWaitUntilTerminated, ResultCode);
  Exec(ExpandConstant('{app}\Uninstall.bat"'), '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);

  
//MsgBox(' ' + ResultCode + ' ', mbInformation, MB_OK);
  
  result := TRUE;
end;


procedure DeinitializeUninstall();
begin
  
    if (MsgBox(ExpandConstant('{cm:confirmdeletedata}'), mbConfirmation, MB_YESNO) = idYes) 
    then  
      begin
        //MsgBox('Deletion Starts',mbInformation, MB_OK);
        //MsgBox(ExpandConstant('{userappdata}' ) + '\'  + ExpandConstant('{#MyAppDataPathName}') + '\Uninstall.bat', mbInformation, MB_OK);;
        if (DirExists (ExpandConstant('{userappdata}' ) + '\'  + ExpandConstant('{#MyAppDataPathName}') ) ) then  
        begin

          DelTree(ExpandConstant('{userappdata}' ) + '\'  + ExpandConstant('{#MyAppDataPathName}') , True, True, True);

          //MsgBox('Deletion Ends', mbInformation, MB_OK);   
        end; 
             
      end;  

  //result := TRUE;
end;

